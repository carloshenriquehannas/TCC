@startuml componentes - restaurante - partes2
title Sistema de Restaurante — Diagrama Componentes - Partes 2
left to right direction

skinparam componentStyle rectangle
skinparam packageStyle rectangle
skinparam shadowing false
skinparam component {
  BackgroundColor #FFFFFF
  BorderColor #333333
  FontColor #111111
}
skinparam package {
  BackgroundColor #F8F8F8
  BorderColor #555555
}

'=================== Agrupamentos (subsystemas) ===================
package "Frontoffice & Atendimento" <<subsystem>> {
  [Gestão de Pedidos]                                                  as C_Pedidos        <<service>>
  [Cardápio / Catálogo]                                                as C_Cardapio       <<domain>>
  [Serviço de Notificações (alérgenos, ofertas, alterações de pedido)] as C_Notificacoes   <<platform>>
  [Pagamento Online / Gateway de Pagamentos]                           as C_Pagamento      <<platform>>
}

package "Reservas & Salão" <<subsystem>> {
  [Gestão de Reservas]                                                 as C_Reservas       <<service>>
  [Salão / Capacidade & Ocupação (mesas e contagem de clientes)]       as C_Salao          <<domain>>
}

package "Operações de Cozinha" <<subsystem>> {
  [Cozinha (KDS / Prioridades)]                                        as C_Cozinha        <<service>>
  [Despacho de Garçom (chamados/entrega de pratos)]                    as C_DespachoGarcom <<service>>
  [Gestão de Estoque & Suprimentos (requisição de ingredientes)]       as C_Estoque        <<domain>>
}

package "Gestão & Insights" <<subsystem>> {
  [Feedback & Satisfação do Cliente (coleta e métricas)]               as C_Feedback       <<service>>
  [Relatórios & Painéis Gerenciais (satisfação, ocupação, KPIs)]       as C_Relatorios     <<analytics>>
}

'=================== Relações (derivadas dos casos de uso) ===================

'— Reservas consulta/atualiza disponibilidade do salão e comunica o cliente
C_Reservas --> C_Salao         : consultar/atualizar disponibilidade
C_Reservas --> C_Notificacoes  : confirmação/alteração/cancelamento de reserva
C_Reservas --> C_Pagamento     : pré-pagamento/sinal (quando aplicável)

'— Pedidos depende de cardápio, estoque, cozinha, pagamento e notifica status
C_Pedidos  --> C_Cardapio      : consultar itens/preços/alérgenos
C_Pedidos  --> C_Estoque       : reservar/baixar insumos
C_Pedidos  --> C_Cozinha       : enviar ordem de preparo
C_Pedidos  --> C_Pagamento     : iniciar/confirmar cobrança
C_Pedidos  --> C_Notificacoes  : status/alterações do pedido

'— Cozinha aciona despacho de garçom e solicita insumos
C_Cozinha  --> C_DespachoGarcom : prato pronto / chamada de garçom
C_Cozinha  --> C_Estoque        : requisitar ingredientes

'— Despacho de garçom usa mapa/ocupação do salão para entrega
C_DespachoGarcom --> C_Salao     : localizar mesa/cliente

'— Cardápio alinha disponibilidade com estoque
C_Cardapio --> C_Estoque        : refletir disponibilidade no menu

'— Notificações pode referenciar itens do cardápio e pagamento
C_Notificacoes --> C_Cardapio   : ofertas/alertas de alérgenos
C_Pagamento    --> C_Notificacoes : recibos/status de pagamento

'— Feedback associa avaliação a um pedido específico
C_Feedback --> C_Pedidos        : contexto da experiência

'— Relatórios consolida indicadores para o gerente
C_Relatorios --> C_Reservas
C_Relatorios --> C_Pedidos
C_Relatorios --> C_Salao
C_Relatorios --> C_Estoque
C_Relatorios --> C_Pagamento
C_Relatorios --> C_Feedback
C_Relatorios --> C_Notificacoes

'=================== Notas/Restrições (sem interfaces) ===================
note right of C_Notificacoes
  Escopos: {alérgenos, ofertas, alterações de pedido}
  Canais: {push, e-mail, SMS}
end note

note right of C_Pagamento
  Requisitos: {3DS/SCA quando aplicável, captura/estorno}
end note

note right of C_Relatorios
  KPIs: {ocupação do salão, tempo de preparo/entrega*, NPS, conversão}
  *Quando disponível via eventos de C_Cozinha/C_DespachoGarcom
end note

note bottom of C_Salao
  Estado: {mesas, lugares, ocupação em tempo real}
end note

'=================== Legenda ===================
legend right
  A --> B  : A consome/depende de B
  <<service>>  : Serviço de negócio
  <<domain>>   : Modelo/estado de domínio
  <<platform>> : Capacidades de plataforma
  <<analytics>>: Consolidação/visualização de métricas
endlegend

@enduml
