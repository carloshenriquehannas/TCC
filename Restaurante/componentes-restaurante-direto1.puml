@startuml componentes - restaurante - direto1
title Sistema de Restaurante — Diagrama Componentes - Direto 1
left to right direction
skinparam componentStyle rectangle

'=== Atores (apenas para ancorar canais) ===
actor "Cliente" as Cliente
actor "Garçom" as Garcom
actor "Chef de Cozinha" as Chef
actor "Gerente" as Gerente

'=== Canais de Interface (Front-ends) ===
package "Canais de Interface" {
  [App Web/Mobile do Cliente] as UI_Cliente <<UI>>
  [POS do Garçom] as UI_Garcom <<UI>>
  [KDS (Tela da Cozinha)] as UI_Cozinha <<UI>>
  [Dashboard do Gerente] as UI_Gerente <<UI>>
}

'=== Fronteira do Sistema ===
rectangle "Sistema de Restaurante" as SistemaRestaurante {
  package "Serviços de Domínio" {
    [API Gateway]                         as S_API        <<service>>
    [Serviço de Autenticação]             as S_Auth       <<service>>
    [Serviço de Menu]                     as S_Menu       <<service>>
    [Serviço de Pedidos]                  as S_Pedidos    <<service>>
    [Orquestrador de Cozinha]             as S_Cozinha    <<service>>
    [Serviço de Reservas]                 as S_Reservas   <<service>>
    [Serviço de Estoque]                  as S_Estoque    <<service>>
    [Serviço de Notificações]             as S_Notif      <<service>>
    [Motor de Regras / Automação]         as S_Regras     <<service>>
    [Serviço de Feedback]                 as S_Feedback   <<service>>
    [Serviço de Métricas / Analytics]     as S_Analytics  <<service>>
  }

  component "Barramento de Eventos\n(pedido_criado, pedido_atualizado, pedido_pronto, ...)" as BUS <<event-bus>>
  database  "DB Transacional" as DB
}

'=== Sistemas Externos ===
component "Gateway de Pagamento" as EXT_Pagamento <<external>>
component "Provedor de Mensageria\n(E-mail / SMS / Push)" as EXT_Msg <<external>>

'=== Ligações Atores -> Canais ===
Cliente --> UI_Cliente
Garcom  --> UI_Garcom
Chef    --> UI_Cozinha
Gerente --> UI_Gerente

'=== Canais -> Autenticação / API ===
UI_Cliente --> S_Auth : login/identidade
UI_Garcom  --> S_Auth
UI_Cozinha --> S_Auth
UI_Gerente --> S_Auth

UI_Cliente --> S_API
UI_Garcom  --> S_API
UI_Cozinha --> S_API
UI_Gerente --> S_API

'=== API -> Serviços de Domínio ===
S_API --> S_Menu
S_API --> S_Pedidos
S_API --> S_Reservas
S_API --> S_Estoque
S_API --> S_Cozinha
S_API --> S_Feedback
S_API --> S_Analytics
S_API --> S_Notif

'=== Dependências entre Serviços ===
S_Pedidos --> S_Menu       : consultar itens do cardápio
S_Pedidos --> S_Estoque    : reservar/liberar insumos
S_Pedidos --> EXT_Pagamento: pagamento online
S_Pedidos --> BUS          : publica eventos de pedido

S_Cozinha ..> BUS          : consome eventos (fila/prioridade)
S_Cozinha --> S_Notif      : sinalizar "prato pronto"

S_Regras  ..> BUS          : consome eventos (regra/trigger)
S_Regras  --> S_Notif      : disparar alertas/ofertas/\nnotificar alterações no pedido

S_Notif   --> EXT_Msg      : envio de notificações

S_Reservas --> S_Analytics : ocupação/quantidade de clientes
S_Feedback --> S_Analytics : nível de satisfação dos clientes

'=== Persistência ===
S_Menu     --> DB
S_Pedidos  --> DB
S_Reservas --> DB
S_Estoque  --> DB
S_Feedback --> DB
S_Analytics--> DB
S_Notif    --> DB

'=== Mapeamento dos Casos de Uso por Serviço (Notas) ===
note right of S_Pedidos
  Atende: "Fazer pedido", "Alterar o meu pedido",
  "Ver o status do pedido",
  "Registrar pedidos (garçom)",
  "Gerenciar ordens por prioridade" (via S_Cozinha)
end note

note right of S_Reservas
  Atende: "Realizar reserva de mesa",
  "Verificar/Ver minha reserva", "Cancelar minha reserva",
  "Visualizar status de reserva (garçom)",
  "Verificar disponibilidade de mesas (gerente)"
end note

note right of S_Menu
  Atende: "Ver o cardápio"
end note

note right of S_Estoque
  Atende: "Gerenciar estoque (gerente)",
  "Solicitar novos ingredientes (chef)"
end note

note right of S_Analytics
  Atende: "Verificar quantidade de clientes (gerente)",
  "Verificar nível de satisfação dos clientes (gerente)"
end note

note right of S_Notif
  Atende: "Enviar notificação de alerta de alérgenos",
          "Enviar notificação de ofertas",
          "Enviar notificação de alterações no pedido",
          "Solicitar garçom p/ entrega de prato pronto"
end note

note right of S_Regras
  Representa o ator "Sistema" automatizado:
  aplica regras de negócio e dispara notificações
  com base em eventos do barramento.
end note

'=== Fluxos principais por papel (Canais -> Serviços) ===
UI_Cliente --> S_Menu       : UC_C_VerCardapio
UI_Cliente --> S_Pedidos    : UC_C_Fazer/Alterar/VerStatus
UI_Cliente --> S_Reservas   : UC_C_Reservar/Verificar/Cancelar
UI_Cliente --> S_Feedback   : UC_C_AvaliarExperiencia

UI_Garcom  --> S_Pedidos    : UC_G_Registrar/VerStatusPedidos
UI_Garcom  --> S_Reservas   : UC_G_VerStatusReserva

UI_Cozinha --> S_Cozinha    : priorização/expedição

UI_Gerente --> S_Reservas   : UC_VerMesas
UI_Gerente --> S_Analytics  : UC_VerClientes / UC_VerSatisfacao
UI_Gerente --> S_Estoque    : UC_GerenciarEstoque

legend right
  <<UI>>        Canal de interface (front-end)
  <<service>>   Serviço de domínio
  <<external>>  Sistema externo
  <<event-bus>> Barramento de eventos (pub/sub)
end legend

@enduml
